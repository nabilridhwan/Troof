import axios from "axios";
import { motion } from "framer-motion";
import { NextPageContext } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import Container from "../../components/Container";
import { useSocket } from "../../hooks/useSocket";
import { EVENTS, TRUTH_OR_DARE_GAME } from "../../socket/events.types";
import { Cookie } from "../../utils/Cookie";
import { ACTION, STATUS } from "../../utils/GameDataTypes";

export async function getServerSideProps(context: NextPageContext) {
	// get room_id from params
	const { room_id } = context.query;

	let player_id = Cookie.getPlayerID(context.req, context.res);

	if (!player_id) {
		return {
			redirect: {
				destination: "/",
				permanent: false,
			},
		};
	}

	// Find the player using the API
	const playerFromAPI = await axios.get("http://localhost:3030/api/player", {
		params: {
			player_id,
		},
	});

	const player = playerFromAPI.data.data;

	if (!player) {
		return {
			redirect: {
				destination: "/",
				permanent: false,
			},
		};
	}

	const rtnPlayer = {
		display_name: player.display_name,
		player_id: player.player_id,
	};

	return {
		props: {
			// Pass the query string to the page
			r: room_id,
			player_id,
			player: rtnPlayer,
		},
	};
}

interface Player {
	player_id: string;
	display_name: string;
	is_party_leader: boolean;
	player: {
		player_id: string;
		display_name: string;
	};
}

export default function GamePage({
	r: roomID,
	player_id,
	player,
}: {
	r: string;
	player_id: string;
	player: {
		player_id: string;
		display_name: string;
	};
}) {
	const [room_id] = useState<string>(roomID);
	const [players, setPlayers] = useState<any[]>([]);

	const [gameStatus, setGameStatus] = useState<string>("in_lobby");

	const [currentPlayer, setCurrentPlayer] = useState<Partial<Player>>({});
	const [action, setAction] = useState<ACTION>(ACTION.WAITING_FOR_SELECTION);
	const [text, setText] = useState<string>("");

	const { socket } = useSocket();

	useEffect(() => {
		if (socket) {
			console.log("Emitting joined truth or dare game");

			socket.emit(TRUTH_OR_DARE_GAME.JOINED, {
				room_id: room_id,
			});

			socket.on(EVENTS.ROOM_PLAYERS_UPDATE, (data) => {
				console.log(EVENTS.ROOM_PLAYERS_UPDATE, " received");
				setPlayers(data);
			});

			socket.on(EVENTS.STATUS_CHANGE, (data) => {
				console.log("Status change received");
				setGameStatus(data.status);
			});

			socket.on(
				TRUTH_OR_DARE_GAME.CONTINUE,
				(data: {
					player: Player;
					player_id: string;
					data: string;
					action: ACTION;
				}) => {
					console.log("Continue game received");
					console.log(data);
					setCurrentPlayer(data.player);
					setText("");
					setAction(data.action);
				}
			);

			socket.on(
				TRUTH_OR_DARE_GAME.INCOMING_DATA,
				(data: {
					player: Player;
					player_id: string;
					data: string;
					action: ACTION;
				}) => {
					console.log("New data received");
					console.log(data);
					setText(
						data.action === ACTION.WAITING_FOR_SELECTION
							? ""
							: data.data
					);
					setCurrentPlayer(data.player ?? {});
					setAction(data.action ?? ACTION.WAITING_FOR_SELECTION);
				}
			);

			socket.on("disconnect", () => {
				console.log("Disconnected");
				// Tell the server that they have been disconnected
				socket.emit(EVENTS.DISCONNECTED, {
					room_id: room_id,
					player_id,
				});
			});
		}
	}, [socket, room_id, player_id]);

	const inLobbyGame = () => {
		if (!socket) return;
		socket.emit(EVENTS.STATUS_CHANGE, {
			room_id: room_id,
			status: STATUS.IN_LOBBY,
		});
	};

	const selectTruth = () => {
		console.log("Selecting truth");
		console.log(!!socket);
		if (!socket) return;
		console.log("Emitting to server to select truth");
		socket.emit(TRUTH_OR_DARE_GAME.SELECT_TRUTH, {
			room_id: room_id,
			player_id: player_id,
		});
	};

	const selectDare = () => {
		if (!socket) return;
		socket.emit(TRUTH_OR_DARE_GAME.SELECT_DARE, {
			room_id: room_id,
			player_id: player_id,
		});
	};

	const handleContinue = () => {
		if (!socket) return;
		socket.emit(TRUTH_OR_DARE_GAME.CONTINUE, {
			room_id: room_id,
			player_id: player_id,
		});
	};

	return (
		<Container>
			<Head>
				<title>Create Next App</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className="w-full h-screen flex items-center justify-center">
				{/* Main items */}
				<div>
					{/* <main>
				<p>Room ID: {room_id}</p>
				<p>Player ID: {player_id}</p>
				<p>Player Name: {player.display_name}</p>
			</main> */}

					{/* Current Player Name */}
					<main className="w-full flex items-center justify-center my-10">
						<div className="rnd bdr w-fit px-10 py-5">
							<h1 className="font-Playfair font-black text-5xl">
								{currentPlayer.display_name}
							</h1>
						</div>
					</main>

					{/* If it is the current player and the action is to wait for a selection, Show the selection truth or dare buttons */}
					{currentPlayer.player_id === player_id &&
						action === ACTION.WAITING_FOR_SELECTION && (
							<>
								<p className="text-center">Select One</p>

								<div className="flex flex-wrap items-center justify-center gap-10 my-20">
									<motion.button
										whileHover={{ scale: 1.1 }}
										whileTap={{ scale: 0.9 }}
										className="btn-huge w-[200px] aspect-square"
										onClick={selectTruth}
									>
										Truth
									</motion.button>

									<motion.button
										whileHover={{ scale: 1.1 }}
										whileTap={{ scale: 0.9 }}
										className="btn-huge w-[200px] aspect-square"
										onClick={selectDare}
									>
										Dare
									</motion.button>
								</div>
							</>
						)}

					{/* Show this below if the current player is not the player and that the action is waiting for selection */}
					{currentPlayer.player_id !== player_id &&
						action === ACTION.WAITING_FOR_SELECTION && (
							<p className="text-center">
								Waiting for {currentPlayer.display_name} to
								select
							</p>
						)}

					{action !== ACTION.WAITING_FOR_SELECTION && (
						<>
							<h2 className="text-center text-3xl font-semibold">
								{text}
							</h2>
						</>
					)}

					{/* If it is the current player and they're not waiting for selection */}
					{currentPlayer.player_id === player_id &&
						action !== ACTION.WAITING_FOR_SELECTION && (
							<div>
								<motion.button
									whileHover={{ scale: 1.05 }}
									whileTap={{ scale: 0.9 }}
									className="btn my-10"
									onClick={handleContinue}
								>
									Continue
								</motion.button>
							</div>
						)}

					<br />
					<br />
				</div>
			</div>
		</Container>
	);
}
